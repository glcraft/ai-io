name: Build

on:
  workflow_dispatch:
  pull_request:
    types: [opened, synchronize, closed]

jobs:
  build:
    if: github.event_name == 'pull_request' && !github.event.pull_request.draft
    strategy:
      fail-fast: false
      matrix:
        system:
          - unknown-linux-gnu
          - unknown-linux-musl
          - pc-windows-msvc
          - apple-darwin
        arch:
          - x86_64
          - aarch64
        gpu:
          - null
          - clblast
          - cuda
          - vulkan
        exclude:
          - system: apple-darwin
            arch: x86_64
          - system: apple-darwin
            gpu: cuda
          - gpu: cuda
            arch: aarch64
        include: 
          - system: apple-darwin
            os: macos-latest
          - system: apple-darwin
            os: macos-latest
            gpu: metal
          - system: unknown-linux-gnu
            os: ubuntu-latest
          - system: unknown-linux-musl
            os: ubuntu-latest
            toolchain: nightly
          - system: pc-windows-msvc
            os: windows-latest
            ext: .exe
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - name: Set up Rust
        id: rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.toolchain || 'stable' }}
          target: ${{ matrix.arch }}-${{ matrix.system }}
          profile: minimal
          override: true
      - name: Install CUDA
        if: matrix.gpu == 'cuda'
        uses: Jimver/cuda-toolkit@v0.2.15
        with:
          method: 'network'
          sub-packages: '["nvcc"]'
          non-cuda-sub-packages: '["libcublas", "libcublas-dev"]'
          use-local-cache: false
          use-github-cache: false
      - name: Install LLVM and Clang
        uses: KyleMayes/install-llvm-action@v2
        with:
          version: "17.0"
      - name: Restore cache
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.arch }}-${{ matrix.system }}
      - name: Setup ssl for linux via apt
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt update && sudo apt upgrade -y && sudo apt install -y libssl-dev pkg-config
      - name: Install gcc environnement for musl
        if: matrix.system == 'unknown-linux-musl'
        run:
          wget -nv http://more.musl.cc/x86_64-linux-musl/${{ matrix.arch }}-linux-musl-cross.tgz;
          tar -xf ${{ matrix.arch }}-linux-musl-cross.tgz;
          echo "PATH=$PWD/${{ matrix.arch }}-linux-musl-cross/bin:$PATH" >> $GITHUB_ENV;
      - name: Install gcc environnement for aarch64 gnu
        if: matrix.system == 'unknown-linux-gnu' && matrix.arch == 'aarch64'
        run: sudo apt install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu binutils-aarch64-linux-gnu
      - name: Build
        uses: actions-rs/cargo@v1
        env:
          CC_x86_64-unknown-linux-musl: x86_64-linux-musl-gcc
          CXX_x86_64-unknown-linux-musl: x86_64-linux-musl-g++
          CC_aarch64-unknown-linux-gnu: aarch64-linux-gnu-gcc
          CXX_aarch64-unknown-linux-gnu: aarch64-linux-gnu-g++
          CFLAGS: ${{env.CUDA_PATH && format('-I {0}/include', env.CUDA_PATH) || '' }}
          CXXFLAGS: ${{env.CUDA_PATH && format('-I {0}/include', env.CUDA_PATH) || '' }}
        with:
          toolchain: ${{ matrix.toolchain || 'stable' }}
          command: build
          args: --release ${{ matrix.gpu && format('--features=llama_cpp/{0}', matrix.gpu) || '' }} --target "${{ matrix.arch }}-${{ matrix.system }}"
          use-cross: false
      - name: Rename Build
        run: mv target/${{ matrix.arch }}-${{ matrix.system }}/release/aio${{ matrix.ext }} target/${{ matrix.arch }}-${{ matrix.system }}/release/aio-${{ matrix.arch }}-${{ matrix.system }}${{ matrix.gpu && format('-{0}', matrix.gpu) || '' }}${{ matrix.ext }}
      - name: Upload build artifact
        uses: actions/upload-artifact@v2
        with:
          name: aio-${{ matrix.arch }}-${{ matrix.system }}
          path: target/${{ matrix.arch }}-${{ matrix.system }}/release/aio-${{ matrix.arch }}-${{ matrix.system }}${{ matrix.gpu && format('-{0}', matrix.gpu) || '' }}${{ matrix.ext }}

  release:
    needs: build
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Retreive version from Cargo.toml
        id: version
        run: echo ::set-output name=version::$(grep -m1 version Cargo.toml | cut -d '"' -f2)
      - name: Download build artifact
        uses: actions/download-artifact@v2
      - name: Upload to Release
        uses: softprops/action-gh-release@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          files: >
            aio-*/aio-*
          fail_on_unmatched_files: true
          tag_name: v${{ steps.version.outputs.version }}
          name: aio v${{ steps.version.outputs.version }}
          body: ${{ github.event.pull_request.body }}
  check-crates-io:
    needs: build
    if: github.event_name == 'pull_request' && github.event.action == 'closed' || github.event_name == 'workflow_dispatch'
    outputs:
      out-to-date: ${{ steps.compare.outputs.out-to-date }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup Nushell
        uses: hustcer/setup-nu@v3
        with:
          version: 0.83.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Get repository name
        id: repository
        run: echo ::set-output name=name::$(nu -c "cargo read-manifest | from json | get name")
      - name: Get infos from local package
        id: package
        shell: nu {0}
        run: |
          let info = cargo read-manifest | from json
          print $"::set-output name=name::($info.name)"
          print $"::set-output name=version::($info.version)"
      - name: Get version from crates.io
        id: crates-io-version
        env:
          PACKAGE_NAME: ${{ steps.repository.outputs.name }}
        shell: nu {0}
        run: |
          let version = cargo search $env.PACKAGE_NAME --limit 1 --color never | parse -r `(?P<name>[\w-]+) = "(?P<version>\d+(?:\.\d+){0,2})"` | where name == $env.PACKAGE_NAME | append {name:"" version:""} | get 0.version
          print $"::set-output name=version::($version)"
      - name: Compare versions
        id: compare
        shell: nu {0}
        env:
          CRATES_IO_VERSION: ${{ steps.crates-io-version.outputs.version }}
          PACKAGE_VERSION: ${{ steps.package.outputs.version }}
        run: |
          let res = $env.CRATES_IO_VERSION == "" or $env.CRATES_IO_VERSION != $env.PACKAGE_VERSION
          print $"::set-output name=out-to-date::($res)"

  publish-crates-io:
    needs: check-crates-io
    if: needs.check-crates-io.outputs.out-to-date == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup Nushell
        uses: hustcer/setup-nu@v3
        with:
          version: 0.83.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Publish on crates.io
        env:
          CARGO_TOKEN: ${{ secrets.CARGO_TOKEN }}
        run: nu .github/workflows/publish-crates-io.nu